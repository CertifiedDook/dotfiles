## Behaviour ##

# When operating in the commandline, the computer should ask before it overwrites anything
interactive

# Always assume the --armor flag is used. GnuPG will export everything in printable base64 text, rather than binary data
armor

# Always use expert mode. This function enables access to special functionality, including generation of elliptic curve cryptography (ECC) public keys at key generation time when the --full-gen-key parameter is used
expert

# Disable comment string in clear text signatures and ASCII armored messages
no-comments

# Disable greeting
no-greeting

# Disable inclusion of the version string in ASCII armored output
no-emit-version

# Timestamps really don't mean much in GnuPG, since you can always set your clock forward or back. So we'll ignore time conflicts
ignore-time-conflict

# Include yourself as a default recipient, so you can decrypt what you encrypt
default-recipient-self

# Display the calculated validity of user IDs during key listings
verify-options show-uid-validity
list-options show-uid-validity
list-options show-keyserver-urls
list-options show-notations
list-options show-policy-urls
list-options show-uid-validity
list-options show-usage

# Display long key IDs
keyid-format 0xlong

# Separate user IDs
fixed-list-mode

# List all keys (or the specified ones) along with their fingerprints
with-fingerprint

# Try to use the GnuPG-Agent. With this option, GnuPG first tries to connect to
# the agent before it asks for a passphrase.
use-agent

## Algorithms and ciphers ##

# Whenever your key is created, it will be created with a preference list, which will typically include obsolete ciphers such as IDEA, BLOWFISH or CAST5. By default, 3DES and SHA-1 are always included. Unfortunately, we cannot change this behavior at this time since they are included in the standard. However, we can tune GnuPG to accept other strong symmetric ciphers with 256-bit keys, and prioritize stronger hashing. As of the time of writing, AES256, TWOFISH, CAMELLIA256 are strong ciphers and may be used with confidence. Also as of the time of writing, SHA512, SHA384, and SHA256 are all a part of the SHA-2 family, and may all be used with confidence
default-preference-list AES256 CAMELLIA256 TWOFISH SHA512 SHA384 SHA256 ZLIB BZIP2 ZIP UNCOMPRESSED MDC NO-KS-MODIFY

# list of personal digest preferences. When multiple digests are supported by
# all recipients, choose the strongest one
personal-cipher-preferences AES256 AES192 AES CAST5

# list of personal digest preferences. When multiple ciphers are supported by
# all recipients, choose the strongest one
cipher-algo AES256
personal-cipher-preferences AES256 CAMELLIA256 TWOFISH

# SHA-512 will be utilized for certification by default, digests for generating cryptographic signatures by default. SHA-512 doubles the digest length of SHA-256 to increase collision resistance
cert-digest-algo SHA512
digest-algo SHA512
personal-digest-preferences SHA512

# When compressing, prefer more efficient first. ZLIB is not supported everywhere, so ZIP is included in this list
compress-algo ZLIB
personal-compress-preferences ZLIB BZIP2 ZIP

# Force the use of modification detection code
force-mdc

## Local security ##

# Key Derivation Options
# GnuPG sadly does not support proper key derivation functions like PBKDF2 or Argon2, but instead uses a string-to-key function that involves taking the password, optionally adding a salt, and hashing it to derive the AES key. This behavior might have been adequate in 1993, but these days that's dangerously unsafe. Unfortunately, all we can do at this moment is simply increase the amount of iterations

# When using string-to-key, a value of 3 will instruct GnuPG to properly salt, then hash the password. Changing this value to anything except 3 will dangerously weaken the symmetric encryption utilized by GnuPG
s2k-mode 3

# Use SHA512 as a digest algorithm
s2k-digest-algo SHA512

# Use AES256 for storing private keys
s2k-cipher-algo AES256

# Use lots of iterations for password stretching. Higher numbers will hash the password iteratively to increase security. This adds something of a work factor in order to slow down systematic guessing attacks. SHA512 is a hash function and not a key derivation function, so you still must use a high entropy password to offset the weak key derivation function, ideally of sufficient bit strength to require at least 2^128 operations to crack. Ideally you should make the computer take a second or more to calculate the symmetric key. If this option is commented out, GnuPG will automatically adjust the iterations to take approximately one tenth of a second on the device it is running on. Just bear in mind: even if you use a device that is slow, it doesn't mean your attacker will be
s2k-count 640000000

# Remember that the security gains of using passwords on private keys are minimal, and if Full Disk Encryption or file based encryption is utilized, somewhat redundant, as an attacker that gains access to your PC or that can execute arbitrary code upon it may either exfiltrate the password or the plaintext private key as it resides in the memory of your device. A far better option to protect your private key is to locate it in a separate virtual machine using Qubes Split GPG, a physically airgapped computer that does not have network connectivity nor USB, a smartcard, or even a hardware security module
# GnuPG usually attempts to opportunistically lock secure memory for cryptographic operations, but if unable to, will often fail open and still allow the operation to proceed even if it can't. Often, it will print "Warning: Unable to use secure memory!" to the console, which won't be visible to the MUA. So we're going to force it to use secure memory, and if it can't, fail entirely
require-secmem

# The no-random-seed-file flag is used to indicate to GnuPG not to pre-cache randmoness to disk for later use to help generate entropy. Pre-caching of entropy is done to help speed up key generation and to produce signatures for the DSA and ECDSA signature algorithms, which consume additional randomness (in the form of nonces) to produce their signatures. Although this flag may slow down signature and key generation somewhat, it helps to ensure that the sources of random numbers (which must be kept secret!) won't end up on your disk, where they could be exploited
no-random-seed-file

# Enable graphical frontends to show progress. Unless you somehow find yourself with the irresistable urge to use hardware from 1994, the performance impact of the software being polled for progress is negligible
enable-progress-filter

## Other ##

# When verifying a signature made from a subkey, ensure that
# the cross certification "back signature" on the subkey is present and valid.
# This protects against a subtle attack against subkeys that can sign.
require-cross-certification

# This is the server that --recv-keys, --send-keys, and --search-keys will
# communicate with to receive keys from, send keys to, and search for keys on
keyserver  hkps://keys.openpgp.org/

# Keyservers are 'always untrusted' and should only be considered to be there to act as an undeletable repository of public keys. Rather than utilize the old 1990s-era PGP Sharing Key Servers, we are going to use Web Key Directory
# auto-key-locate wkd

# Don't trust the PKA record
keyserver-options no-honor-pka-record

# Include the revoked public keys
keyserver-options include-revoked

# Always get the subkeys
keyserver-options	include-subkeys

# Do not send photo IDs to the keyserver
keyserver-options no-include-attributes

# The default key to sign with. If this option is not used, the default key is
# the first key found in the secret keyring
default-key 20810F57B5910162

# Default charset used for metadata
charset utf-8
display-charset utf-8

# Key certification options
# cert-notation pgp@czochanski.pl=https://czochanski.pl/pgp/certs/%f.notes.asc
# cert-policy-url https://czochanski.pl/pgp/
